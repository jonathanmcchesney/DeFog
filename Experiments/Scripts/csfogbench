#!/bin/bash

function simple_benchmark {

    today=$(date +"%m/%d/%Y")
	echo "Local: Starting Simple benchmarks..."
    
	simple_CPU_benchmark

    simple_IO_benchmark

	simple_network_benchmark
	
	displayInfo

}

function simple_benchmark_aws {

    today=$(date +"%m/%d/%Y")
	echo "AWS: Starting Simple benchmarks..."
		
	simple_CPU_benchmark

    simple_IO_benchmark

	simple_network_benchmark
	
	displayInfo
	
}

function simple_benchmark_edge {

    today=$(date +"%m/%d/%Y")
	echo "Edge: Starting Simple benchmarks..."
    
	simple_CPU_benchmark

    simple_IO_benchmark

	simple_network_benchmark
	
	displayInfo

}

function displayInfo {
cat <<INFO

Run Date: $today 
*********************************
CPU Model Name: $cpuNume
Number of Cores: $cpuCores
CPU Frequency: $cpuFrequency MHz
System Uptime: $sysUptime
Small Weights dl time: $smallWeights
Large Weights rate: $downloadTest
Sys I/O Rate: $inputOutput
*********************************

INFO
}

function simple_CPU_benchmark {
	local zippedFile=zipFile

    cpuNume=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
	sysUptime=$(uptime|awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }')
    cpuFrequency=$( awk -F: ' /cpu MHz/ {cpuFrequency=$2} END {print cpuFrequency}' /proc/cpuinfo )
    cpuCores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
	
	echo -n "Benching System CPU..."
    dd if=/dev/urandom of=$zippedFile bs=1024 count=20000 >>/dev/null 2>&1
	echo -n "Unzipping small weights file ..."
    smallWeights=$( (/usr/bin/time -f "%es" tar cfj $zippedFile.bz2 $zippedFile) 2>&1 )
    rm -f zipFile*
    echo DONE
		
}

function simple_IO_benchmark {
    local benchmarkFile=benchmarker__$$

	echo -n "Benching System Input & Output ... "
    inputOutput=$( ( dd if=/dev/zero of=$benchmarkFile bs=64k count=16k conv=fdatasync && rm -f $benchmarkFile ) 2>&1 | awk -F, '{inputOutput=$NF} END { print inputOutput}' )
    echo DONE
}

function simple_network_benchmark {
	echo -n "Benching network download speed, downloading large weights file... "
    downloadTest=$( _downloadTest https://pjreddie.com/media/files/yolov3.weights )
    echo DONE
}

function _downloadTest {
    time wget -O /dev/null "$1" 2>&1 | awk '/\/dev\/null/ {downloadRate=$3 $4} END {gsub(/\(|\)/,"",downloadRate); print downloadRate}'
    perf stat -d wget -O /dev/null "$1" 2>&1 | awk '/\/dev\/null/ {downloadRate=$3 $4} END {gsub(/\(|\)/,"",downloadRate); print downloadRate}'
}


function download_benchmark {
    echo -n "Downloading file(s) from $1 ... "
    _downloadTest "$2"
}

function downloads_benchmark {
    echo

    download_benchmark "yolov3 weights" \
        https://pjreddie.com/media/files/yolov3.weights

    download_benchmark "tiny weights" \
		https://pjreddie.com/media/files/tiny.weights

}

function instantiate_file {
    echo -n Creating file ...
    dd if=/dev/urandom of=large_file bs=1024 count=102400
    echo OK
}

function install_unixbench {
    test -d UnixBench && return
    apt-get install build-essential

    local file_ver=UnixBench5.1.3
	echo "Getting UnixBench..."
 	time wget -N https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/teddysun/UnixBench5.1.3.tgz
	tar xvfz $file_ver.tgz
}

function install_sysbench {
    test -d sysbench && return
	sudo apt-get install sysbench
}

function benchmark_unixbench {
    install_unixbench

    pushd UnixBench > /dev/null
    ./Run index
    popd > /dev/null
}

function benchmark_sysbench {
    echo -n Installing sysbench...

	install_sysbench
	
	echo -n Benchmarking using sysbench...
	sysbench --test=cpu --cpu-max-prime=20000 run
}

function delete_temps {
    echo -n Deleting temporary files ...
    rm -f large_file
	rm -f benchmarker__*
    rm -rf zipFile*
	rm -rf UnixBench*
    echo OK
}

function build_docker_yolo {
    echo -n Entering dockerTest...
	cd dockerTest
	echo -n Building yolo docker container...
	time sudo ./build.sh
}

function run_docker_yolo { 
	echo -n Running yolo docker container...
	time sudo ./run.sh
	cd csc4006-EdgeBenchmarking/Experiments/YOLO/yolo/
	time ./darknet detect cfg/yolov3-tiny.cfg yolov3-tiny.weights data/eagle.jpg
}

function HELP {
    cat <<HELP
Help: benchmarker [OPTION...]

-a Benchmark all processes
-c Benchmark YOLO
-d Benchmark only small and large weight downloads
-f Create large weights file
-s Run sysbench CPU benchmark
-u Run UnixBench
-x Delete temporary files
HELP
}


function main {
	test $run_edge && simple_benchmark_edge
	simple_benchmark_aws

    test $run_downloads && downloads_benchmark
	test $run_yolo && build_docker_yolo
	test $run_sysbench && benchmark_sysbench
	test $run_unixbench && benchmark_unixbench
}


while getopts :adcfsxuh:e opt; do
    case "$opt" in
        a)
            run_downloads=true
		    run_yolo=true
		    run_unixbench=true
			run_sysbench=true
            ;;
        d)
            run_downloads=true
            ;;
		c)
            run_yolo=true
            ;;
		e)
            run_edge=true
            ;;	
        f)
            instantiate_file
            exit
            ;;
		s) 	run_sysbench=true
			;;
        x)
            delete_temps
            exit
            ;;
		u)
            run_unixbench=true
            ;;
        ?)
            HELP
            exit 2
            ;;
    esac
done

main

