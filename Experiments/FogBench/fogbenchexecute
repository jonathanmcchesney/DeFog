#!/bin/bash

function HELP {
    cat <<HELP
Help: fogbenchmarker [OPTION...]

-b Run Benchmarks on both Cloud and Edge
-c Run Benchmarks on Cloud
-e Run Benchmarks on Edge

HELP
}

function executebenchmarkhelp {
		ssh -i ~/Documents/csc4006awskey.pem ubuntu@ec2-52-31-99-235.eu-west-1.compute.amazonaws.com 'bash -s' -- < ./fogbench -?
}

function executebenchmarkoncloud {
		echo "ssh into cloud instance.."
		echo "perfoming actions benchmarks.."
		ssh -i ~/Documents/csc4006awskey.pem ubuntu@ec2-52-31-99-235.eu-west-1.compute.amazonaws.com ' sudo bash -s' -- < ./fogbenchactions $environment $actions $applications
		echo "Done ssh"
}

function executebenchmarkapplicationoncloud {
		
		echo "ssh into cloud instance for application benchmarks.."
			ssh -i ~/Documents/csc4006awskey.pem ubuntu@ec2-52-31-99-235.eu-west-1.compute.amazonaws.com ' sudo bash -s' -- < ./fogbenchapplications $environment $actions $applications
		echo "Done ssh"
		
		local start=$(date +%s.%N)
		scp -i ~/Documents/csc4006awskey.pem ubuntu@ec2-52-31-99-235.eu-west-1.compute.amazonaws.com:~/fogbench/results/results.txt cloudresult.txt
		local end=$(date +%s.%N)
		local runtime=$( echo "$end - $start" | bc -l )
		
		echo Transfer cloud application results: completed in $runtime secs | tee -a $filename.txt
		
		cat cloudresult.txt >> $filename.txt
		rm cloudresult.txt
	
}

function determineapplicationbenchmarks {
		if [ "$applications" == "-y" ];
		then
			echo YOLO Benchmarks: | tee -a $filename.txt
			seperator
			setupandexecuteyolobenchmarks
		elif [ "$applications" == "-p" ];
		then	
			echo Pocket Sphinx Benchmarks: | tee -a $filename.txt
			seperator
			setupandexecutepsphinxbenchmarks
		elif [ "$applications" == "-j" ];
		then	
			echo Aeneas Benchmarks: | tee -a $filename.txt
			seperator
			setupandexecuteaeneasbenchmarks	
		elif [ "$applications" == "-i" ];
		then	
			echo iPokeMon Benchmarks: | tee -a $filename.txt
			seperator
			setupipokemonserver	
			setupandexecuteipokemonbenchmarks
		elif [ "$applications" == "-k" ];
		then	
			echo iPokeMon Benchmarks: | tee -a $filename.txt
			seperator
			setupandexecuteipokemonbenchmarks	
		fi	
}

function setupandexecuteipokemonbenchmarks {
	echo "JMETER!!!"
}

function setupipokemonserver {
	ssh -i ~/Documents/csc4006awskey.pem ubuntu@ec2-52-31-99-235.eu-west-1.compute.amazonaws.com -t "cd fogbench/ipokemonbuild/Experiments/iPokeMon/docker && sudo -sH && . enter.sh; bash"
}

function setupandexecuteyolobenchmarks {
	declare -a arrPics
	newassetname=./assets/yolo-assets/yoloimage.jpg		
	local count=1
	
	for file in ./assets/yolo-assets/*.jpg
	do
		echo -e "" | tee -a $filename.txt
		echo YOLO Benchmark Run $count: | tee -a $filename.txt
		echo "" | tee -a $filename.txt
		
		((count++))
		arrPics=("${Pics[@]}" "$file")
		asset=$arrPics
		echo $asset
		echo "Sending asset at path: " $newassetname "to application..."
		sendAsset
		echo "DONE"
		executebenchmarkapplicationoncloud
		
	done
	
}

function setupandexecutepsphinxbenchmarks {
	declare -a arrWav
	newassetname=./assets/psphinx-assets/psphinx.wav
	
	for file in ./assets/psphinx-assets/*.wav
	do
		arrWavs=("${Wavs[@]}" "$file")
		asset=$arrWavs
		echo "Sending asset at path: " $asset "to application..."
		sendAsset
		echo "DONE"
		executebenchmarkapplicationoncloud
	
	done	
}

function setupandexecuteaeneasbenchmarks {

	declare -a arrAudios
	
	for file1 in ./assets/aeneas-assets/audio/*.mp3
	do
		arrAudios=("${arrAudios[@]}" "$file1")
	done


	declare -a arrTexts
	
	for file2 in ./assets/aeneas-assets/text/*.xhtml
	do
	
		local arrTexts=("${arrTexts[@]}" "$file2")	
	done	
		
		
	total=${#arrAudios[@]}
	
	for (( i=0; i<=$(( $total -1 )); i++ ))
	do 
		asset=${arrAudios[$i]}
		newassetname=./assets/aeneas-assets/aeneasaudio.mp3

		echo "Sending asset at path: " $asset "to application..."
		sendAsset
		echo "DONE"
		
		asset=${arrTexts[$i]}
		newassetname=./assets/aeneas-assets/aeneastext.xhtml

		echo "Sending asset at path: " $asset "to application..."
		sendAsset
		echo "DONE"
		
		executebenchmarkapplicationoncloud

	done

}

function sendAsset {
	TIMEFORMAT=%R
	cp $asset $newassetname
	local start=$(date +%s.%N)
	scp -i ~/Documents/csc4006awskey.pem $newassetname ubuntu@ec2-52-31-99-235.eu-west-1.compute.amazonaws.com:~/fogbench/assets > /dev/null 2>&1
	local end=$(date +%s.%N)
	rm $newassetname
	
	local runtime=$( echo "$end - $start" | bc -l )
	echo Upload $asset to server: completed in $runtime secs | tee -a $filename.txt

}

function executebenchmarkonedge {
	echo "EDGE!"
}

function actionsuserinput {
while true; do
	echo ""
	echo "Actions:"
		echo ""
		echo "0. All"
		echo "1. Small and large weight downloads"
		echo "2. Large weights file"
		echo "3. Sysbench"
		echo "4. UnixBench"
		echo "5. Delete temporary files"
		echo "6. Simple System Benchmarks"
		echo "7. None"
		echo ""
  read -p "What actions would you like to run:[0,1,2,3,4,5,6,7]" ANS
  case $ANS in 
    '0') 
       actions="-a"
       break;;
    '1') 
       actions="d"
       break;;
	'2') 
       actions="-f" 
       break;;  
	'3') 
       actions="-s"
       break;;
    '4') 
       actions="-u"
       break;;
	'5') 
       actions="-x"
	   break;;
	'6') 
       actions="-g"   
	   break;;
	'7') 
       actions="-n"  
       break;;   	
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Actions value:$actions"
}

function environmentuserinput {
while true; do
	echo ""
	echo "Environments:"
		echo ""
		echo "0. Cloud"
		echo "1. Edge"
		echo "2. Both"
		echo ""
  read -p "What environment would you like to benchmark: [0,1,2]" ANS
  case $ANS in 
    '0') 
       environment="-c"
       break;;
    '1') 
       environment="-e" 
       break;;
	'2') 
       environment="-b"
       break;;   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Enviroment value:$environment"
}

function applicationsuserinput {
while true; do
	echo ""
	echo "Applications:"
		echo ""
		echo "0. Yolo"
		echo "1. PocketSphinx"
		echo "2. Aeneas"
		echo "3. iPokeMon (build and run)"
		echo "4. iPokeMon (run benchmarks only)"
		echo "5. None"
		echo ""
  read -p "What Applications would you like to benchmark: [0,1,2,3,4]" ANS
  case $ANS in 
    '0') 
       applications="-y"
       break;;
    '1') 
       applications="-p" 
       break;;
	'2') 
       applications="-j"
       break;;
	'3') 
       applications="-i"
       break;;	   
	'4') 
       applications="-k"
       break;;   
	'5') 
       applications="-m"
       break;; 	   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Applications value:$applications"
}

function seperator {
echo -e "*****************************************************************************" | tee -a $filename.txt
}

function asciiheader {

echo "   ___ ___   ___          ___              _    ";
echo "  / __/ __| | __|__  __ _| _ ) ___ _ _  __| |_  ";
echo " | (__\__ \ | _/ _ \/ _\` | _ \/ -_) ' \/ _| ' \ ";
echo "  \___|___/ |_|\___/\__, |___/\___|_||_\__|_||_|";
echo "                    |___/                       ";
echo ""
echo -e "CS FogBench:" | tee $filename.txt
echo -e "Welcome, you are using CS FogBench: a cloud and edge benchmarking tool!" | tee -a $filename.txt
echo -e "	Created by: Jonathan McChesney, student at Queen's University Belfast" | tee -a $filename.txt
echo -e "	CSC4006 Final Year Research and Development Project" | tee -a $filename.txt
echo -e "" | tee -a $filename.txt
echo -e "*****************************************************************************" | tee -a $filename.txt
echo -e "*****************************************************************************" | tee -a $filename.txt
echo -e "" | tee -a $filename.txt

}

function createresultfile {
filename=result
if [[ -e $filename.txt ]] ; then
    i=0
    while [[ -e $filename-$i.txt ]] ; do
        let i++
    done
    filename=$filename-$i
fi
}

function main {

	createresultfile
	asciiheader
	
	environmentuserinput
	actionsuserinput
	applicationsuserinput
	
	echo ""
	echo "Enivironment value:$environment"
	echo "Actions value:$actions"
	echo "Applications value:$applications"
	echo ""

	
	if [ "$environment" == "-c" ] || [ "$environment" == "-b" ];
	then	
		executebenchmarkoncloud
		determineapplicationbenchmarks
	fi	
	
	if [ "$environment" == "-e" ] || [ "$environment" == "-b" ];
	then	
		executebenchmarkonedge
	fi	

}


while getopts :h: opt; do
    case "$opt" in
        h)
            bench_help=true
            ;;	
        ?)
            HELP
            exit 2
            ;;
    esac
done

main

