#!/bin/bash

source ~/Documents/configs/config.sh

cloudaddress=$cloudaddress
clouduser=$clouduser
edgeaddress=$edgeaddress
edgeuser=$edgeuser
awskey=$awskey
configslocation=~/Documents/configs/*
configfilelocation=~/Documents/configs/config.sh

function HELP {
    cat <<HELP
Help: DeFog: Demystifying Fog Systems Interaction via Container based benchmarking [OPTION...]

Environments:

-b Run Benchmarks on both Cloud and Edge
-c Run Benchmarks on Cloud
-e Run Benchmarks on Edge

Actions:
- Run all system benchmarks
- Runs small and large weight downloads test
- Test large file create/remove speed
- Run Sysbench
- Run UnixBench
- Delete temporary files
- Run Simple System Benchmarks
- No actions

Applications
- Run Yolo
- Run Pocket Sphinx
- Run Aeneas
- Build and Run iPokeMon
- Run iPokeMon
- No Applications

HELP
}

function executebenchmarkhelp {
		ssh -i $awskey $clouduser@$cloudaddress 'bash -s' -- < ./fogbench -?
}

function benchmark_both_actions {
		echo "ssh into edge/cloud - cloud instance for actions and system benchmarks.."
			ssh -i $awskey $clouduser@$cloudaddress ' sudo bash -s' -- < ./fogbenchactions -z $actions $applications
		echo "Done ssh"
		
		echo "ssh into edge instance for actions and system benchmarks.."
			ssh $edgeuser@$edgeaddress ' sudo bash -s' -- < ./fogbenchactions $environment $actions $applications
		echo "Done ssh"	
}

function benchmark_both_applications {
		echo "ssh into edge/cloud - cloud instance for applications benchmarks.."
			ssh -i $awskey $clouduser@$cloudaddress ' sudo bash -s' -- < ./fogbenchapplications -z $actions $applications
		echo "Done ssh"
		
		echo "ssh into edge/cloud instance for applications benchmarks.."
			ssh $edgeuser@$edgeaddress ' sudo bash -s' -- < ./fogbenchapplications $environment $actions $applications
		echo "Done ssh"	
		
		local start=$(date +%s.%N)
			scp $edgeuser@$edgeaddress:~/fogbench/results/* ./
		local end=$(date +%s.%N)
		local runtime=$( echo "$end - $start" | bc -l )
		metricsValues[3]=$runtime
		
		cat edgeresult.txt >> $verbose_filename.txt
		rm edgeresult.txt
		
		read -a newarr < arrresult.txt 
		rm arrresult.txt
		
		set_returned_application_metrics	
		
		echo Transfer both pipeline edge application results to edge device: completed in $runtime secs | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
}

function benchmark_edge_actions {
		echo "ssh into edge instance for actions and system benchmarks.."
			ssh $edgeuser@$edgeaddress ' sudo bash -s' -- < ./fogbenchactions $environment $actions $applications
		echo "Done ssh"
		
		local start=$(date +%s.%N)
			scp $edgeuser@$edgeaddress:~/fogbench/results/* ./
		local end=$(date +%s.%N)
		local runtime=$( echo "$end - $start" | bc -l )
		
		cat edgeresult.txt >> $verbose_filename.txt
		rm edgeresult.txt
		
		echo Transfer edge action results to edge device: completed in $runtime secs | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
		
}

function benchmark_edge_applications {
		
		echo "ssh into edge instance for application benchmarks.."
			ssh	$edgeuser@$edgeaddress ' sudo bash -s' -- < ./fogbenchapplications $environment $actions $applications
		echo "Done ssh"
		
		local start=$(date +%s.%N)
			scp $edgeuser@$edgeaddress:~/fogbench/results/* ./
		local end=$(date +%s.%N)
		local runtime=$( echo "$end - $start" | bc -l )
		metricsValues[3]=$runtime

		cat edgeresult.txt >> $verbose_filename.txt
		rm edgeresult.txt
		
		read -a newarr < arrresult.txt 
		rm arrresult.txt
		
		set_returned_application_metrics	
		
		echo Transfer edge application results to edge device: completed in $runtime secs | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
	
}

function benchmark_cloud_actions {
		echo "ssh into cloud instance for actions and system benchmarks.."
			ssh -i $awskey $clouduser@$cloudaddress ' sudo bash -s' -- < ./fogbenchactions $environment $actions $applications
		echo "Done ssh"
		
		local start=$(date +%s.%N)
			scp -i $awskey $clouduser@$cloudaddress:~/fogbench/results/* ./
		local end=$(date +%s.%N)
		local runtime=$( echo "$end - $start" | bc -l )
		
		cat cloudresult.txt >> $verbose_filename.txt
		rm cloudresult.txt
		
		echo Transfer cloud action results to edge device: completed in $runtime secs | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt

}

function benchmark_cloud_applications {
		
		echo "ssh into cloud instance for application benchmarks.."
			ssh -i $awskey $clouduser@$cloudaddress ' sudo bash -s' -- < ./fogbenchapplications $environment $actions $applications
		echo "Done ssh"
		
		local start=$(date +%s.%N)
			#scp -i $awskey $clouduser@$cloudaddress:~/fogbench/results/* ./
			local transfer_cloud=$(scp -v -i $awskey $clouduser@$cloudaddress:~/fogbench/results/* ./ 2>&1 | grep "Transferred") 		
			local newboy=${transfer_cloud//[!0-9\\ \\.]/}
			newarr1=(`echo ${newboy}`);
			echo ${newarr1[@]}
		local end=$(date +%s.%N)
		local runtime=$( echo "$end - $start" | bc -l )
		metricsValues[3]=$runtime
		metricsValues[8]=${newarr1[1]}

		rm returnedasset.*

		cat cloudresult.txt >> $verbose_filename.txt
		rm cloudresult.txt
		
		read -a newarr < arrresult.txt 
		rm arrresult.txt
		
		set_returned_application_metrics		
			
		echo Transfer cloud application results to edge device: completed in $runtime secs | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
		
}

function calc_cloud_cost {
	local awshrcost=0.016
	local convert=3600
	local awsseccost=$(bc <<< "scale=10;$awshrcost/$convert")
	local minruntime=60
	local computetime=${metricsValues[1]}
	
	local cost=$(bc <<< "$computetime*$awsseccost")
	local newCost=$(bc <<< "$totalcost+$cost")
	
	totalcost=$newCost	
	
	metricsValues[6]=$cost
	
}

function calc_edge_cost {
	local edgehrcost=0.008
	local convert=3600
	local edgeseccost=$(bc <<< "scale=10;$edgehrcost/$convert")
	local computetime=${metricsValues[1]}
	
	local cost=$(bc <<< "$computetime*$edgeseccost")
	local newCost=$(bc <<< "$totalcost+$cost")
	
	totalcost=$newCost
		
	metricsValues[6]=$cost
}

function calc_rtt {

	local T1=${metricsValues[0]} 
	local E=${metricsValues[1]} 
	local T3=${metricsValues[3]} 
	local rtt=$(bc <<< "$T1+$T3+$E")

	metricsValues[4]=$rtt
}

function calc_rtf {
	local computation=${newarr[1]}
	local length=${newarr[5]}
	local rtf=$(bc <<< "scale=10;$computation/$length")

	metricsValues[5]=$rtf
}

function set_returned_application_metrics {
	local mets=${#metricsValues[@]}
	local count=1
	
	for (( i=0; i<=$(( $mets -1 )); i++ ))
	do 
		((count++))
		
		if [ "${metricsValues[$i]}" == "NA" ] && [ "${newarr[$i]}" != "NA" ];
		then
			metricsValues[$i]=${newarr[$i]}
		fi
	done
	
	echo this1
		echo ${metricsValues[@]}

	echo this2
		echo ${newarr[@]}

	
}

function benchmark_applications {
		if [ "$applications" == "-y" ];
		then
			echo YOLO Benchmarks: | tee -a $verbose_filename.txt
			seperator
			benchmark_yolo
		elif [ "$applications" == "-p" ];
		then	
			echo Pocket Sphinx Benchmarks: | tee -a $verbose_filename.txt
			seperator
			benchmark_pocket_sphinx
		elif [ "$applications" == "-j" ];
		then	
			echo Aeneas Benchmarks: | tee -a $verbose_filename.txt
			seperator
			benchmark_aeneas	
		elif [ "$applications" == "-i" ];
		then	
			echo iPokeMon Benchmarks: | tee -a $verbose_filename.txt
			seperator
			start_ipokemon_server	
			benchmark_ipokemon
		elif [ "$applications" == "-k" ];
		then	
			echo iPokeMon Benchmarks: | tee -a $verbose_filename.txt
			seperator
			benchmark_ipokemon	
		elif [ "$applications" == "-l" ];
		then	
			echo FogLAMP Benchmarks: | tee -a $verbose_filename.txt
			seperator
			benchmark_foglamp	
		fi	
}

function benchmark_ipokemon {
	cd jmeter/bin

	echo "Running JMETER!!!"
		./jmeter -n -t iPokeMon.jmx -l testresults.csv
	echo "Taurus..."
		bzt iPokeMon.jmx
	cd ../../
}

function start_ipokemon_server {
		if [ "$environment" == "-c" ] || [ "$environment" == "-b" ];
		then
			ssh -i $awskey $clouduser@$cloudaddress -t "cd fogbench/ipokemonbuild/Experiments/iPokeMon/docker && sudo -sH && . enter.sh; bash"
		fi
		if [ "$environment" == "-e" ] || [ "$environment" == "-b" ];
		then
			ssh $edgeuser@$edgeaddress -t "cd fogbench/ipokemonbuild/Experiments/iPokeMon/docker && sudo -sH && . enter.sh; bash"
		fi	
}
	
function benchmark_application {
		if [ "$environment" == "-c" ];
		then
			benchmark_cloud_applications
			calc_rtt
			if [ "${metricsValues[5]}" != "NA" ];
			then
				calc_rtf
			fi
			calc_cloud_cost
		fi	
		if [ "$environment" == "-e" ];
		then
			benchmark_edge_applications
			calc_rtt
			if [ "${metricsValues[5]}" != "NA" ];
			then
				calc_rtf
			fi
			calc_edge_cost
		fi
		if [ "$environment" == "-b" ];
		then
			benchmark_both_applications
			calc_rtt
			if [ "${metricsValues[5]}" != "NA" ];
			then
				calc_rtf
			fi
			calc_edge_cost
		fi
		echo ${metricsValues[@]} | tee -a $metrics_verbose_filename.txt
}

function benchmark_foglamp {
	declare -a arrCurlCommands
	newassetname=./assets/foglamp-assets/foglampcurlcommand.sh		
	local count=1
	
	for file in ./assets/foglamp-assets/*.sh
	do
	
		create_metric_array
		
		echo -e "" | tee -a $verbose_filename.txt
		echo FogLAMP Benchmark Run $count: | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
		
		arrCurlCommands=("${Curls[@]}" "$file")
		asset=$arrCurlCommands
		
		echo "Sending asset at path: " $newassetname "to application..."
		scp_asset
		echo "DONE"
		
		benchmark_application
		
		((count++))

	done
	
}

function benchmark_yolo {
	declare -a arrPics
	newassetname=./assets/yolo-assets/yoloimage.jpg		
	local count=1
	
	for file in ./assets/yolo-assets/*.jpg
	do
	
		create_metric_array
		
		echo -e "" | tee -a $verbose_filename.txt
		echo YOLO Benchmark Run $count: | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
		
		arrPics=("${Pics[@]}" "$file")
		asset=$arrPics
		
		echo "Sending asset at path: " $newassetname "to application..."
		scp_asset
		echo "DONE"
		
		benchmark_application
		
		((count++))

	done
	
}

function benchmark_pocket_sphinx {
	declare -a arrWavs
	newassetname=./assets/psphinx-assets/psphinx.wav
	local count=1
	
	for file in ./assets/psphinx-assets/*.wav
	do
		
		create_metric_array

		echo -e "" | tee -a $verbose_filename.txt
		echo Pocket Sphinx Benchmark Run $count: | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
		
		arrWavs=("${Wavs[@]}" "$file")
		asset=$arrWavs
		
		echo "Sending asset at path: " $asset "to application..."
		scp_asset
		echo "DONE"
		
		benchmark_application
	
		((count++))

	
	done	
}

function benchmark_aeneas {

	declare -a arrAudios
	
	for file1 in ./assets/aeneas-assets/audio/*.mp3
	do
		arrAudios=("${arrAudios[@]}" "$file1")
	done


	declare -a arrTexts
	
	for file2 in ./assets/aeneas-assets/text/*.xhtml
	do
	
		local arrTexts=("${arrTexts[@]}" "$file2")	
	done	
		
		
	total=${#arrAudios[@]}
	local count=1
	
	for (( i=0; i<=$(( $total -1 )); i++ ))
	do 
	
		create_metric_array

		echo -e "" | tee -a $verbose_filename.txt
		echo Aeneas Benchmark Run $count: | tee -a $verbose_filename.txt
		echo "" | tee -a $verbose_filename.txt
		
		asset=${arrAudios[$i]}
		newassetname=./assets/aeneas-assets/aeneasaudio.mp3

		echo "Sending asset at path: " $asset "to application..."
		scp_asset
		echo "DONE"
		
		asset=${arrTexts[$i]}
		newassetname=./assets/aeneas-assets/aeneastext.xhtml
		
		if [ "$environment" != "-b" ];
		then
			echo "Sending asset at path: " $asset "to application..."
			scp_asset
			echo "DONE"		
		fi	
		
		if [ "$environment" == "-b" ];
		then
			local shortasset="${asset##*/}"
			echo $shortasset > ./aeneas.txt
			
			asset=./aeneas.txt
			newassetname=./aeneas.txt

			echo "Sending asset at path: " $asset "to application..."
			scp_asset
			echo "DONE"			
		fi	
		
		benchmark_application
		
		((count++))

	done

}

function create_metric_array {
	declare -g metricsLabels=('T1' 'ET' 'T2' 'T3' 'RTT' 'RTF' 'Cost' 'BytesUp' 'BytesDown' 'BytesDownEdgeCloud' 'EdgeCloudT4')
	declare -g metricsValues=('NA' 'NA' 'NA' 'NA' 'NA' 'NA' 'NA' 'NA' 'NA' 'NA' 'NA')
		
}

function scp_asset {
	TIMEFORMAT=%R
	cp $asset $newassetname
	local start=$(date +%s.%N)
	
	echo also
	
	if [ "$environment" == "-c" ];
	then
		local transfer_cloud=$(scp -v -i $awskey $newassetname $clouduser@$cloudaddress:~/fogbench/assets 2>&1 | grep "Transferred") 		
		local newboy=${transfer_cloud//[!0-9\\ \\.]/}
		newarr1=(`echo ${newboy}`);
		echo ${newarr1[@]}

		
	fi	
	if [ "$environment" == "-e" ] || [ "$environment" == "-b" ];
	then
		local transfer_edge=$(scp -v $newassetname $edgeuser@$edgeaddress:~/fogbench/assets 2>&1 | grep "Transferred") 		
		local newboy=${transfer_edge//[!0-9\\ \\.]/}
		newarr1=(`echo ${newboy}`);
		echo ${newarr1[@]}
	fi

	local end=$(date +%s.%N)
	local runtime=$( echo "$end - $start" | bc -l )
	
	metricsValues[0]=$runtime
	echo this here
	echo ${newarr1[0]}
	metricsValues[7]=${newarr1[0]}

	rm $newassetname

}

function send_config_cloud {
	echo sending config to cloud
	scp -i $awskey $configfilelocation $clouduser@$cloudaddress:~/fogbench/configs > /dev/null 2>&1
	echo done
}

function send_config_edge {
	echo sending config to edge
	scp $configslocation $edgeuser@$edgeaddress:~/fogbench/configs > /dev/null 2>&1
	echo done

}

function actions_user_input {
while true; do
	echo ""
	echo "Actions:"
		echo ""
		echo "0. All"
		echo "1. Small and large weight downloads"
		echo "2. Test large file create/remove speed"
		echo "3. Sysbench"
		echo "4. UnixBench"
		echo "5. Delete temporary files"
		echo "6. Simple System Benchmarks"
		echo "7. None"
		echo ""
  read -p "What actions would you like to run:[0,1,2,3,4,5,6,7]" ANS
  case $ANS in 
    '0') 
       actions="-a"
       break;;
    '1') 
       actions="-d"
       break;;
	'2') 
       actions="-f" 
       break;;  
	'3') 
       actions="-s"
       break;;
    '4') 
       actions="-u"
       break;;
	'5') 
       actions="-x"
	   break;;
	'6') 
       actions="-g"   
	   break;;
	'7') 
       actions="-n"  
       break;;   	
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Actions value:$actions"
}

function env_user_input {
while true; do
	echo ""
	echo "Environments:"
		echo ""
		echo "0. Cloud Only"
		echo "1. Edge Only"
		echo "2. Cloud & Edge"
		echo ""
  read -p "What environment would you like to benchmark: [0,1,2]" ANS
  case $ANS in 
    '0') 
       environment="-c"
       break;;
    '1') 
       environment="-e" 
       break;;
	'2') 
       environment="-b"
       break;;   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Enviroment value:$environment"
}

function applications_user_input {
while true; do
	echo ""
	echo "Applications:"
		echo ""
		echo "0. Yolo"
		echo "1. PocketSphinx"
		echo "2. Aeneas"
		echo "3. iPokeMon (build and run)"
		echo "4. iPokeMon (run benchmarks only)"
		echo "5. FogLAMP"
		echo "6. None"
		echo ""
  read -p "What Applications would you like to benchmark: [0,1,2,3,4,5,6]" ANS
  case $ANS in 
    '0') 
       applications="-y"
       break;;
    '1') 
       applications="-p" 
       break;;
	'2') 
       applications="-j"
       break;;
	'3') 
       applications="-i"
       break;;	   
	'4') 
       applications="-k"
       break;;   
	'5') 
       applications="-l"
       break;;
	'6') 
       applications="-m"
       break;; 	   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Applications value:$applications"
}

function seperator {
echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
}

function display_ascii_header {

echo "  ___      ___            _ ";
echo " |   \ ___| __|__  __ _  (_)";
echo " | |) / -_) _/ _ \/ _\` |  _ ";
echo " |___/\___|_|\___/\__, | (_)";
echo "                  |___/     ";
echo ""
echo -e "DeFog: " | tee $verbose_filename.txt
echo -e "		Demystifying Fog Systems Interaction via Container based benchmarking" | tee $verbose_filename.txt
echo -e "	Created by: Jonathan McChesney, student at Queen's University Belfast" | tee -a $verbose_filename.txt
echo -e "	CSC4006 Final Year Research and Development Project" | tee -a $verbose_filename.txt
echo -e "" | tee -a $verbose_filename.txt
echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
echo -e "" | tee -a $verbose_filename.txt

}

function create_result_files {
verbose_filename=result
metrics_verbose_filename=metrics
cd results
if [[ -e $verbose_filename.txt ]] ; then
    i=0
    while [[ -e $verbose_filename-$i.txt ]] ; do
        let i++
    done
    verbose_filename=$verbose_filename-$i
fi
if [[ -e $metrics_verbose_filename.txt ]] ; then
    i=0
    while [[ -e $metrics_verbose_filename-$i.txt ]] ; do
        let i++
    done
    metrics_verbose_filename=$metrics_verbose_filename-$i
fi
cd ../
}

function main {

	create_result_files
	create_metric_array

	display_ascii_header
	
	env_user_input
	actions_user_input
	applications_user_input
	
	totalcost=0
	
	if [ "$environment" == "-c" ];
	then
		echo "Cloud Only Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt
		
		echo ${metricsLabels[@]} >> $metrics_verbose_filename.txt

		benchmark_cloud_actions
		send_config_cloud
		benchmark_applications
	fi	
	
	if [ "$environment" == "-e" ];
	then	
		echo "Edge Only Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt
		
		echo ${metricsLabels[@]} >> $metrics_verbose_filename.txt
		
		
		benchmark_edge_actions
		send_config_edge
		benchmark_applications
	fi	
	
	if [ "$environment" == "-b" ];
	then	
		echo "Edge/Cloud Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt
		
		echo ${metricsLabels[@]} >> $metrics_verbose_filename.txt
		
		benchmark_both_actions
		send_config_edge
		benchmark_applications
	fi	
	
	echo metrics to be saved:
	echo ${metricsValues[@]}
	
	cat $metrics_verbose_filename.txt | tr -s '[:blank:]' ',' > $metrics_verbose_filename.csv
	
	mv $verbose_filename.txt results/
	mv $metrics_verbose_filename.txt results/
	mv $metrics_verbose_filename.csv results/

}


while getopts :h: opt; do
    case "$opt" in
        h)
            bench_help=true
            ;;	
        ?)
            HELP
            exit 2
            ;;
    esac
done

main
