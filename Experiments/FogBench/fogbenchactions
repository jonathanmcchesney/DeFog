#!/bin/bash

function simple_benchmark {

    today=$(date +"%m/%d/%Y")
	echo "Starting Simple benchmarks..."
    
	simple_CPU_benchmark

    simple_IO_benchmark

	simple_network_benchmark
	
	displayInfo | tee -a $filename.txt

}

function displayInfo {
cat <<INFO

Run Date: $today 
*********************************
CPU Model Name: $cpuNume
Number of Cores: $cpuCores
CPU Frequency: $cpuFrequency MHz
System Uptime: $sysUptime
Small Weights dl speed: $smallWeights
Large Weights dl rate: $downloadTest
Sys I/O Rate: $inputOutput
*********************************

INFO
}

function simple_CPU_benchmark {
	local zippedFile=zipFile

    cpuNume=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
	sysUptime=$(uptime|awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }')
    cpuFrequency=$( awk -F: ' /cpu MHz/ {cpuFrequency=$2} END {print cpuFrequency}' /proc/cpuinfo )
    cpuCores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
	
	echo -n "Benching System CPU..."
    dd if=/dev/urandom of=$zippedFile bs=1024 count=20000 >>/dev/null 2>&1
	echo -n "Unzipping small weights file ..."
    smallWeights=$( (/usr/bin/time -f "%es" tar cfj $zippedFile.bz2 $zippedFile) 2>&1 )
    rm -f zipFile*
    echo DONE
		
}

function simple_IO_benchmark {
    local benchmarkFile=benchmarker__$$

	echo -n "Benching System Input & Output ... "
    inputOutput=$( ( dd if=/dev/zero of=$benchmarkFile bs=64k count=16k conv=fdatasync && rm -f $benchmarkFile ) 2>&1 | awk -F, '{inputOutput=$NF} END { print inputOutput}' )
    echo DONE
}

function simple_network_benchmark {
	echo -n "Benching network download speed, downloading large weights file... "
    downloadTest=$( _downloadTest https://pjreddie.com/media/files/yolov3.weights )
    echo DONE
}

function _downloadTest {
	local start=$(date +%s.%N)

    wget -O /dev/null "$1" 2>&1 | awk '/\/dev\/null/ {downloadRate=$3 $4} END {gsub(/\(|\)/,"",downloadRate); print downloadRate}' | tee -a $filename.txt
	local end=$(date +%s.%N)
	local runtime=$( echo "$end - $start" | bc -l )
		
	echo Download test: completed in $runtime secs | tee -a $filename.txt
}


function download_benchmark {
    echo -n "Downloading file(s) from $1 ... "
    _downloadTest "$2"
}

function downloads_benchmark {
    echo

    download_benchmark "yolov3 weights" \
        https://pjreddie.com/media/files/yolov3.weights

    download_benchmark "tiny weights" \
		https://pjreddie.com/media/files/tiny.weights

}

function instantiate_file {
    echo -n Creating file ...
	local start=$(date +%s.%N)
    dd if=/dev/urandom of=large_file bs=1024 count=102400
    echo OK
	local end=$(date +%s.%N)
	local runtime=$( echo "$end - $start" | bc -l )
		
	echo Create large file speed: completed in $runtime secs | tee -a $filename.txt
	
	remove_file
}

function remove_file {
	echo -n Removing file ...
	local start=$(date +%s.%N)
	rm large_file
    echo OK
	local end=$(date +%s.%N)
	local runtime=$( echo "$end - $start" | bc -l )
		
	echo Remove large file speed: completed in $runtime secs | tee -a $filename.txt
}

function install_unixbench {
    test -d UnixBench && return
    apt-get install build-essential

    local file_ver=UnixBench5.1.3
	echo "Getting UnixBench..."
 	wget -N https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/teddysun/UnixBench5.1.3.tgz
	tar xvfz $file_ver.tgz
}

function install_sysbench {
    test -d sysbench && return
	sudo apt-get install sysbench
}

function benchmark_unixbench {
    install_unixbench

    pushd UnixBench > /dev/null
    ./Run index 
    popd > /dev/null | tee -a $filename.txt
}

function benchmark_sysbench {
    echo -n Installing sysbench...

	install_sysbench
	
	echo -n Benchmarking using sysbench...
	sysbench --test=cpu --cpu-max-prime=20000 run | tee -a $filename.txt
}

function removedockerimages {
	docker stop $(docker ps -aq)
	docker rm $(docker ps -aq)
	docker rmi $(docker images -q)
}

function delete_temps {
    echo Deleting cleanup files ...
    rm -f large_file
	rm -f benchmarker__*
    rm -rf zipFile*
	rm -rf UnixBench*
	rm -rf yolobuild
	rm -rf psphinxbuild
	rm -rf ipokemonbuild
	rm -rf aeneasbuild
	rm -rf assets
    echo OK
	
	echo Removing docker containers and images...
		removedockerimages &>/dev/null
	echo OK
}

function build_docker_ipokemon {
	echo Entering ipokemonbuild...
	mkdir ipokemonbuild
	cd ipokemonbuild

	echo Pulling down ipokemon docker file...
	sudo git init 
	sudo git remote add -f csc4006-EdgeBenchmarking https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git
	sudo git config core.sparsecheckout true
	echo Experiments/iPokeMon/docker/ >> .git/info/sparse-checkout
	sudo git pull https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git master
	
	echo Experiments/iPokeMon/docker...
	cd Experiments/iPokeMon/docker

	echo Building iPokeMon docker image...
	chmod 777 execute.sh
	time . build.sh 
	echo DONE
	
}

function build_docker_psphinx {
	echo Entering psphinxbuild...
	mkdir psphinxbuild
	cd psphinxbuild

	echo Pulling down psphinx docker file...
	sudo git init 
	sudo git remote add -f csc4006-EdgeBenchmarking https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git
	sudo git config core.sparsecheckout true
	echo Experiments/PocketSphinx/docker/ >> .git/info/sparse-checkout
	sudo git pull https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git master
	
	echo Experiments/PocketSphinx/docker...
	cd Experiments/PocketSphinx/docker

	echo Building PocketSphinx docker image - console logs suppressed...
	echo Please wait as this may take a few minutes...
	chmod 777 execute.sh
	time . build.sh &>/dev/null
	echo DONE
	
}

function build_docker_yolo {
    echo Entering yolobuild...
	mkdir yolobuild
	cd yolobuild

	echo Pulling down yolo docker file...
	sudo git init 
	sudo git remote add -f csc4006-EdgeBenchmarking https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git
	sudo git config core.sparsecheckout true
	echo Experiments/YOLO/docker/ >> .git/info/sparse-checkout
	sudo git pull https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git master
	
	echo Experiments/YOLO/docker...
	cd Experiments/YOLO/docker

	echo Building yolo docker image - console logs suppressed...
	echo Please wait as this may take a few minutes...
	chmod 777 execute.sh
	time . build.sh
	echo DONE
	
}

function build_docker_aeneas {
    echo Entering aeneasbuild...
	mkdir aeneasbuild
	cd aeneasbuild

	echo Pulling down aeneas docker file...
	sudo git init 
	sudo git remote add -f csc4006-EdgeBenchmarking https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git
	sudo git config core.sparsecheckout true
	echo Experiments/Aeneas/docker/ >> .git/info/sparse-checkout
	sudo git pull https://gitlab.eeecs.qub.ac.uk/40126401/csc4006-EdgeBenchmarking.git master
	
	echo Experiments/Aeneas/docker...
	cd Experiments/Aeneas/docker

	echo Building aeneas docker image - console logs suppressed...
	echo Please wait as this may take a few minutes...
	chmod 777 execute.sh
	time . build.sh &>/dev/null
	echo DONE
	
}

function HELP {
    cat <<HELP
Help: benchmarker [OPTION...]

-a Benchmark all processes
-c Benchmark YOLO
-d Benchmark only small and large weight downloads
-f Create large weights file
-s Run sysbench CPU benchmark
-u Run UnixBench
-x Delete temporary files
HELP
}

function seperator {
echo -e "*****************************************************************************" | tee -a $filename.txt
}

function edgebench {
echo "Edge actions and system benchmarks: " | tee $filename.txt
	seperator
	

	test $run_simple && simple_benchmark
	test $run_downloads && downloads_benchmark
	test $run_lfile && instantiate_file
	test $run_sysbench && benchmark_sysbench
	test $run_unixbench && benchmark_unixbench
	
	test $run_yolo && build_docker_yolo
	test $run_psphinx && build_docker_psphinx
	test $run_aeneas && build_docker_aeneas
	
}

function cloudbench {
	echo "Cloud actions and system benchmarks: " | tee $filename.txt
	seperator

	test $run_simple && simple_benchmark
	test $run_downloads && downloads_benchmark
	test $run_lfile && instantiate_file
	test $run_sysbench && benchmark_sysbench
	test $run_unixbench && benchmark_unixbench
	
	test $run_yolo && build_docker_yolo
	test $run_psphinx && build_docker_psphinx
	test $run_aeneas && build_docker_aeneas
	test $build_ipokemon && build_docker_ipokemon

}

function main {
	mkdir -p fogbench && cd fogbench 	
	test $run_delete && delete_temps
	rm results.txt
	rm -rf dir assets && mkdir assets && chmod 777 assets
	rm -rf dir results && mkdir results && chmod 777 results
		
	filename=results
	
    test $run_cloud && cloudbench
    test $run_edge && edgebench
	
	mv $filename.txt results/results.txt

}

while getopts :ceb:adfsxuhngs:zyijpmk opt; do
    case "$opt" in
        a)
            run_downloads=true
		    run_unixbench=true
			run_sysbench=true
			run_simple=true
            ;;
		c)
			run_cloud=true
			;;
		b)
			run_cloud=true
			run_edge=true
			;;
		e)
			run_edge=true
			;;
        d)
            run_downloads=true
            ;;
        f)
            run_lfile=true
            ;;
		s) 	
			run_sysbench=true
			;;
        x)
            run_delete=true
            ;;
		u)
            run_unixbench=true
            ;;
		g)	
			run_simple=true
			;;
		n)
			;;	
		z)
			run_yolo=true
			run_psphinx=true
			run_ipokemon=true
			run_aeneas=true
			;;
		i)	
			build_ipokemon=true
			run_ipokemon=true
			;;
		j)	
			run_aeneas=true
			;;	
		k)	
			run_ipokemon=true
			;;	
		p)	
			run_psphinx=true
			;;	
		y)
            run_yolo=true
            ;;	
		m)
			;;
        ?)
            HELP
            exit 2
            ;;
    esac
done

main

