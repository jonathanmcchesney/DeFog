#!/bin/bash

# link local address to the config file
source ~/Documents/configs/config.sh

# create local variables of config variables
cloudaddress=$cloudaddress
clouduser=$clouduser
edgeaddress1=$edgeaddress1
edgeaddress2=$edgeaddress2
edgeuser1=$edgeuser1
edgeuser2=$edgeuser2
awskey=$awskey
cloudpublicip=$cloudpublicip
configslocation=~/Documents/configs/*
configfilelocation=~/Documents/configs/config.sh

users=5
ramp_up=0
test_duration=300

# utility function to determine the edge device address (i.e. ipaddress) based on user input
function edgeaddress_selector {
	if [ "$environment" == "-e" ] || [ "$environment" == "-b" ];
	then
		while true; do
			echo ""
			echo "Please select your edge node device:"
				echo ""
				echo "0. Odroid XU4"
				echo "1. Raspberry Pi"
				echo ""
		  read -p "What actions would you like to run:[0,1]" ANS
		  case $ANS in 
			'0') 
			   edgeaddress=$edgeaddress1
			   edgeuser=$edgeuser1
			   break;;
			'1') 
			   edgeaddress=$edgeaddress2
			   edgeuser=$edgeuser2
			   break;;  	
			*) 
			   echo "Wrong input, try again";;
		  esac
		done
		echo "edgeaddress value:$edgeaddress"
		echo "edgeuser value:$edgeuser"
	fi
}

# utility function to determine the platform actions to be perfomed based on user input
function actions_user_input {
while true; do
	echo ""
	echo "Actions:"
		echo ""
		echo "0. All"
		echo "1. Small and large weight downloads"
		echo "2. Test large file create/remove speed"
		echo "3. Sysbench"
		echo "4. UnixBench"
		echo "5. Delete temporary files"
		echo "6. Simple System Benchmarks"
		echo "7. None"
		echo ""
  read -p "What actions would you like to run:[0,1,2,3,4,5,6,7]" ANS
  case $ANS in 
    '0') 
       actions="-a"
       break;;
    '1') 
       actions="-d"
       break;;
	'2') 
       actions="-f" 
       break;;  
	'3') 
       actions="-s"
       break;;
    '4') 
       actions="-u"
       break;;
	'5') 
       actions="-x"
	   break;;
	'6') 
       actions="-g"   
	   break;;
	'7') 
       actions="-n"  
       break;;   	
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Actions value:$actions"
}

# utility function to determine the platform pipeline based on user input
function env_user_input {
while true; do
	echo ""
	echo "Environments:"
		echo ""
		echo "0. Cloud Only"
		echo "1. Edge Only"
		echo "2. Cloud & Edge"
		echo ""
  read -p "What environment would you like to benchmark: [0,1,2]" ANS
  case $ANS in 
    '0') 
       environment="-c"
       break;;
    '1') 
       environment="-e" 
       break;;
	'2') 
       environment="-b"
       break;;   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Enviroment value:$environment"
}

# utility function to determine the platform applications to be benchmarked based on user input
function applications_user_input {
while true; do
	echo ""
	echo "Applications:"
		echo ""
		echo "0. Yolo"
		echo "1. PocketSphinx"
		echo "2. Aeneas"
		echo "3. iPokeMon (build and run)"
		echo "4. iPokeMon (run benchmarks only)"
		echo "5. FogLAMP"
		echo "6. None"
		echo ""
  read -p "What Applications would you like to benchmark: [0,1,2,3,4,5,6]" ANS
  case $ANS in 
    '0') 
       applications="-y"
       break;;
    '1') 
       applications="-p" 
       break;;
	'2') 
       applications="-j"
       break;;
	'3') 
       applications="-i"
       break;;	   
	'4') 
       applications="-k"
       break;;   
	'5') 
       applications="-l"
       break;;
	'6') 
       applications="-m"
       break;; 	   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Applications value:$applications"
}

# utility function to determine the platform applications to be benchmarked on the cloud/edge pipeline based on user input
function applications_cloud_edge_user_input {
while true; do
	echo ""
	echo "Applications:"
		echo ""
		echo "0. Yolo"
		echo "1. PocketSphinx"
		echo "2. Aeneas"
		echo "3. None"
		echo ""
  read -p "What Applications would you like to benchmark: [0,1,2,3]" ANS
  case $ANS in 
    '0') 
       applications="-y"
       break;;
    '1') 
       applications="-p" 
       break;;
	'2') 
       applications="-j"
       break;;
	'3') 
       applications="-m"
       break;; 	   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Applications value:$applications"
}

function test_users_user_input {
while true; do
	echo ""
	echo "Please select the number of users to simulate:"
		echo ""
		echo "0. 1"
		echo "1. 2"
		echo "2. Default (5)"
		echo "3. 10"
		echo "4. 25"
		echo "5. 50"
		echo "6. 100"
		echo "7. 250"
		echo ""
  read -p "How many users/threads would you like to start: [0,1,2,3,4,5,6,7]" ANS
  case $ANS in 
    '0') 
       users=1
       break;;
    '1') 
       users=2
       break;;
	'2') 
       users=5
       break;;
	'3') 
       users=10
       break;;	   
	'4') 
       users=25
       break;;   
	'5') 
       users=50
       break;;
	'6') 
       users=100
       break;; 	  
	'7') 
       users=250
       break;; 	   
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Users value:$users"
}

function test_duration_user_input {
while true; do
	echo ""
	echo "Please select the test duration in seconds:"
		echo ""
		echo "0. 60"
		echo "1. 120"
		echo "2. Default (300)"
		echo "3. 600"
		echo "4. 900"
		echo ""
  read -p "How long would you like to run the test: [0,1,2,3,4]" ANS
  case $ANS in 
    '0') 
       test_duration=60
       break;;
    '1') 
       test_duration=120
       break;;
	'2') 
       test_duration=300
       break;;
	'3') 
       test_duration=600
       break;;	   
	'4') 
       test_duration=900
       break;;      
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Test duration value:$test_duration"
}

function test_ramp_up_user_input {
while true; do
	echo ""
	echo "Please select the test ramp up period in seconds:"
		echo ""
		echo "0. Default (0)"
		echo "1. 10"
		echo "2. 30"
		echo "3. 60"
		echo "4. 120"
		echo ""
  read -p "How long would you like to ramp up the threads/users for: [0,1,2,3,4]" ANS
  case $ANS in 
    '0') 
       ramp_up=0
       break;;
    '1') 
       ramp_up=10
       break;;
	'2') 
       ramp_up=30
       break;;
	'3') 
       ramp_up=60
       break;;	   
	'4') 
       ramp_up=120
       break;;      
    *) 
       echo "Wrong input, try again";;
  esac
done
echo "Test ramp up value:$ramp_up"
}

# utility function to print sepeartor/formatter line
function seperator {
echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
}

# print and display the ascii header
function display_ascii_header {

	echo "  ___      ___            _ ";
	echo " |   \ ___| __|__  __ _  (_)";
	echo " | |) / -_) _/ _ \/ _\` |  _ ";
	echo " |___/\___|_|\___/\__, | (_)";
	echo "                  |___/     ";
	echo ""
	echo -e "DeFog: " | tee $verbose_filename.txt
	echo -e "		Demystifying Fog Systems Interaction via Container based benchmarking" | tee $verbose_filename.txt
	echo -e "	Created by: Jonathan McChesney, student at Queen's University Belfast" | tee -a $verbose_filename.txt
	echo -e "	CSC4006 Final Year Research and Development Project" | tee -a $verbose_filename.txt
	echo -e "" | tee -a $verbose_filename.txt
	echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
	echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
	echo -e "" | tee -a $verbose_filename.txt
}

# create the various results file/filenames (data file, verbose data file, jmeter file, taurus file)
function create_result_files {
	verbose_filename=result
	metrics_verbose_filename=metrics
	jmeter_filename=jmeter
	taurus_filename=taurus
	filenumber=""
	
	cd results
	if [[ -e $verbose_filename.txt ]] ; then
		i=0
		while [[ -e $verbose_filename-$i.txt ]] ; do
			let i++
		done
		filenumber=$i
		verbose_filename=$verbose_filename-$i
	fi
	if [[ -e $metrics_verbose_filename.txt ]] ; then
		i=0
		while [[ -e $metrics_verbose_filename-$i.txt ]] ; do
			let i++
		done
		filenumber=$i
		metrics_verbose_filename=$metrics_verbose_filename-$i
	fi
	if [[ -e $jmeter_filename.csv ]] ; then
		i=0
		while [[ -e $jmeter_filename-$i.csv ]] ; do
			let i++
		done
		filenumber=$i
		jmeter_filename=$jmeter_filename-$i
	fi
	if [[ -e $taurus_filename.csv ]] ; then
		i=0
		while [[ -e $taurus_filename-$i.csv ]] ; do
			let i++
		done
		filenumber=$i
		taurus_filename=$taurus_filename-$i
	fi
	cd ../
}

function setup_jmeter {

	if [ "$applications" == "-i" ] || [ "$applications" == "-k" ];
	then
		test_users_user_input
		test_duration_user_input
		test_ramp_up_user_input
	fi
}

# application main
function main {

	create_result_files
	display_ascii_header
	
	env_user_input
		
	if [ "$environment" == "-c" ]; # cloud only
	then
		echo "Cloud Only Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt
		
		actions_user_input
		applications_user_input
		setup_jmeter
		
	fi	
	
	if [ "$environment" == "-e" ]; # edge only
	then	
		echo "Edge Only Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt		
		
		edgeaddress_selector
		actions_user_input
		applications_user_input
		setup_jmeter
		
	fi	
	
	if [ "$environment" == "-b" ]; # cloud/edge
	then	
		echo "Edge/Cloud Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt
				
		edgeaddress_selector
		applications_cloud_edge_user_input
		
	fi
	
	(
		export actions
		export environment
		export applications
		export users
		export ramp_up
		export test_duration
		export filenumber
		export verbose_filename
		export metrics_verbose_filename
		export jmeter_filename
		export taurus_filename
		export cloudaddress
		export clouduser
		export edgeaddress
		export edgeaddress1
		export edgeaddress2
		export edgeuser
		export edgeuser1
		export edgeuser2
		export awskey
		export cloudpublicip
		export configslocation
		export configfilelocation
		
		source ./defogexecute
	)

}

main
