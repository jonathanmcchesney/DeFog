#!/bin/bash

##
# This script is copied into FogLAMP 'bin' directory by the Foglamp install process
#
# This script let the user to update Foglamp either manually or in auto mode via a schedule
# enable/disable/remove and also to set the time interval of the schedule for apt package update.
#
##

#
# Note:
# current implementation only supports the scheduling interval setting:
# it's not possible to specify to run at particular time not a specific week day
#

__author__="Massimiliano Pinto, Amarendra K Sinha"
__copyright__="Copyright (c) 2018 OSIsoft, LLC"
__license__="Apache 2.0"
__version__="1.0"

FOGLAMP_AUTO_UPDATER_VER=${__version__}

REST_API_SCHEME="http://"
SCHEDULE_PROCESS_NAME="FogLAMPUpdater"
SCHEDULE_NAME="FogLAMP updater"

# Set FOGLAMP_ROOT to default location if not set
if [ "${FOGLAMP_ROOT}" = "" ]; then
        FOGLAMP_ROOT=/usr/local/foglamp
fi

# Check FOGLAMP_ROOT is a directory
if [ ! -d "${FOGLAMP_ROOT}" ]; then
        echo "FogLAMP home directory missing or incorrectly set environment"
        exit 1
fi

# Add FOGLAMP_ROOT/python to PYTHONPATH
export PYTHONPATH="${PYTHONPATH}:${FOGLAMP_ROOT}/scripts/common"

# Print usage and credits
usage()
{
	echo "FogLAMP auto update enable/disable v${FOGLAMP_AUTO_UPDATER_VER} Copyright (c) 2018 OSIsoft, LLC"
	echo
	echo "usage: $(basename $0) --manual --auto --enable --disable --remove-update [--host --port --use-https --update-interval=seconds]"
	echo
	echo  mandatory options:
	echo "  --manual           Run update script manually."
	echo "  --auto             Create update task schedule for auto update."
	echo "  --enable           Enables the auto update  or creates the enabled schedule if not set."
	echo "  --disable          Disables the auto update if set"
	echo "  --remove-update    Removes the auto update"
	echo
	echo "optional parameters:"
	echo "  --host             Sets the FogLAMP REST API host, default is 127.0.0.1"
	echo "  --port                Sets the FogLAMP REST API port, default is 8081"
	echo "  --use-https           Sets HTTPS for FogLAMP REST API, default is http"
	echo "  --update-interval     Sets the auto update interval in seconds, default is 10800 (3 hours)"
	exit 0
}

# Handle '--use-https' option
echo "$@" | grep -q -- --use-https && REST_API_SCHEME="https://"

# Handle input parameters
while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        --port)
            API_PORT=$VALUE
            ;;
        --host)
            API_ADDRESS=$VALUE
            ;;
        --manual)
            MANUAL_UPDATE="Y"
            ;;
        --auto)
            AUTO_UPDATE="Y"
            ;;
        --enable)
            ENABLE_UPDATE="Y"
            ;;
        --disable)
            DISABLE_UPDATE="Y"
            ;;
        --remove-update)
            REMOVE_UPDATE="Y"
            ;;
        --update-interval)
            UPDATE_INTERVAL=$VALUE
            ;;
        -h | --help)
           usage 
            ;;
        *)
           usage 
        ;;
    esac
    shift
done

# Check for mandatoruy options first
if [ ! "${MANUAL_UPDATE}" ] && [ ! "${AUTO_UPDATE}" ] && [ ! "${ENABLE_UPDATE}" ] && [ ! "${DISABLE_UPDATE}" ] && [ ! "${REMOVE_UPDATE}" ]; then
	usage
	exit 1
fi

# Set API default port
if [ ! "${API_PORT}" ]; then
	API_PORT=8081
fi

# Set 'localhost' if API_ADDRESS is not set
if [ ! "${API_ADDRESS}" ]; then
	API_ADDRESS="localhost"
fi

# Set API URL
REST_API_URL="${REST_API_SCHEME}${API_ADDRESS}:${API_PORT}"

# Check FogLAMP API is running at API_ADDRESS, API_PORT via 'ping'
CHECK_SERVICE=`curl -s -k --max-time 30 "${REST_API_URL}/foglamp/ping" | grep -i uptime`
if [ ! "${CHECK_SERVICE}" ]; then
	if [ ! "${CHECK_SERVICE}" ]; then
		echo "$(basename $0): Error: cannot connect to FogLAMP API at [${REST_API_URL}]"
		exit 1
	fi
fi

# Check whether SCHEDULE_NAME exists
# Abort on JSON erros
CMD_SCHEDULE_EXISTS="curl -s -k --max-time 30 '${REST_API_URL}/foglamp/schedule' | python3 -m json_parse get_schedule_id '${SCHEDULE_NAME}'"
SCHEDULE_EXISTS=`eval ${CMD_SCHEDULE_EXISTS}`
ret_code=$?
if [ "${ret_code}" -ne 0 ]; then
	echo "$(basename $0): Error: checking schedule ${SCHEDULE_NAME}, [${SCHEDULE_EXISTS}]. Check FogLAMP configuration."
	exit 3

fi

# Check SCHEDULE_NAME details from JSON data
# Abort if more than one scheduler is found
# Note:
# If the schedule doesn't exist it will be created with --enable
if [ "${SCHEDULE_EXISTS}" ]; then
	NUM_SCHEDULES=`echo ${SCHEDULE_EXISTS} | tr ' ' '\\n' | wc -l`
	if [ "${NUM_SCHEDULES}" -gt 1 ]; then
		echo "$(basename $0): Error: found more than one 'schedule_id' for schedule ${SCHEDULE_PROCESS_NAME}. Check FogLAMP configuration."
		exit 3
	fi

	# Set the schedule id
	SCHEDULE_ID=${SCHEDULE_EXISTS}
fi

# Set default interval
if [ ! "${UPDATE_INTERVAL}" ]; then
	UPDATE_INTERVAL=10800
fi

# Prepare JSON paylod for the new schedule creation
#
# - task type is INTERVAL
# - repeat set to default or specified value
# - enabled set to true
# 
SCHEDULE_SET_PAYLOAD="{\"type\": 3, \
			\"name\": \"${SCHEDULE_NAME}\",
			\"process_name\": \"${SCHEDULE_PROCESS_NAME}\",
			\"repeat\": ${UPDATE_INTERVAL},
			\"enabled\": \"t\",
			\"exclusive\": \"t\"}"

###
# Commands handling
###

# If manual mode has been choosen, then simply run the update task script and exit
if [ "${MANUAL_UPDATE}" = "Y" ]; then
	# CREATE API call
	MANUAL_OUTPUT=`curl -s -k --max-time 30 -X PUT "${REST_API_URL}/foglamp/update"`

	# Check 'deleted' in JSON output
	CHECK_MANUAL=`echo ${MANUAL_OUTPUT} | grep Running`
	if [ ! "${CHECK_MANUAL}" ]; then
		echo "$(basename $0): error: failed to run manual update: ${MANUAL_OUTPUT}"
		exit 3
	else
		echo "The Foglamp update process has been successfully scheduled."
		exit 0
	fi
fi

# Create Update schedule vide create task
if [ "${AUTO_UPDATE}" = "Y" ]; then
	if [ "${SCHEDULE_ID}" ]; then
		echo "$(basename $0): warning: the schedule '${SCHEDULE_NAME}' with id ${SCHEDULE_ID} already exists."
		exit 2
	fi

	# CREATE API call
	AUTO_OUTPUT=`curl -s -k --max-time 30 -X POST -d "${SCHEDULE_SET_PAYLOAD}" "${REST_API_URL}/foglamp/schedule"`

	# Check 'deleted' in JSON output
	AUTO_CREATE=`echo ${AUTO_OUTPUT} | grep ${SCHEDULE_PROCESS_NAME}`
	if [ ! "${AUTO_CREATE}" ]; then
		echo "$(basename $0): error: failed to create schedule: ${AUTO_OUTPUT}"
		exit 3
	else
		echo "The Foglamp update has been successfully auto scheduled."
		exit 0
	fi
fi

#
# --remove-update
# Remove the schedule from FogLAMP
#
if [ "${REMOVE_UPDATE}" = "Y" ]; then
	if [ ! "${SCHEDULE_ID}" ]; then
		echo "$(basename $0): warning: the schedule '${SCHEDULE_NAME}' is not active."
		exit 2
	fi

	# DELETE API call
	REMOVE_OUTPUT=`curl -s -k --max-time 30 -X DELETE "${REST_API_URL}/foglamp/schedule/${SCHEDULE_ID}"`

	# Check 'deleted' in JSON output
	CHECK_REMOVE=`echo ${REMOVE_OUTPUT} | grep -i message | grep -i deleted`
	if [ ! "${CHECK_REMOVE}" ]; then
		echo "$(basename $0): error: failed to remove schedule: ${REMOVE_OUTPUT}"
		exit 3
	else
		echo "The schedule '${SCHEDULE_NAME}', ID [${SCHEDULE_ID}] has been removed."
		exit 0
	fi
fi

#
# --enable
# Enable the update schedule or activating it if not set
#
if [ "${ENABLE_UPDATE}" = "Y" ]; then
	if [ ! "${SCHEDULE_ID}" ]; then
		echo "The schedule '${SCHEDULE_NAME}' is not active. Activating and enabling it"

		# Create the schedule
		# POST API call for 'enable' and 'update interval'
		SCHEDULE_SET=`curl -s -k --max-time 30 -X POST -d "${SCHEDULE_SET_PAYLOAD}" "${REST_API_URL}/foglamp/schedule"`

		# Check "id" in JSON output
		CMD_NEW_SCHEDULE_EXISTS="echo '${SCHEDULE_SET}' | python3 -m json_parse get_current_schedule_id '${SCHEDULE_NAME}'"
		SCHEDULE_ID=`eval ${CMD_NEW_SCHEDULE_EXISTS}`
       		if [ ! "${SCHEDULE_ID}" ]; then
			echo "$(basename $0): error: cannot get 'schedule_id' for new created schedule '${SCHEDULE_NAME}': [${SCHEDULE_SET}]"
			exit 3
		fi
		echo "Schedule '${SCHEDULE_NAME}' successfully added, ID [${SCHEDULE_ID}], interval ${UPDATE_INTERVAL} seconds"
		exit 0
	else
		# Update the schedule, using SCHEDULE_ID
		# PUT API call for 'enable'and 'update interval'
		ENABLE_OUTPUT=`curl -s -k --max-time 30 -X PUT -d "{\"repeat\": ${UPDATE_INTERVAL}, \"enabled\": true}" "${REST_API_URL}/foglamp/schedule/${SCHEDULE_ID}"`

		# Check "id":"..." in JSON output
		CMD_NEW_SCHEDULE_EXISTS="echo '${ENABLE_OUTPUT}' | python3 -m json_parse get_current_schedule_id '${SCHEDULE_NAME}'"
		SCHEDULE_ID=`eval ${CMD_NEW_SCHEDULE_EXISTS}`
		if [ ! "${SCHEDULE_ID}" ]; then
			echo "$(basename $0): error: failed to enable schedule: ${ENABLE_OUTPUT}"
			exit 3
		else
			echo "The schedule '${SCHEDULE_NAME}', ID [${SCHEDULE_ID}] has been enabled, interval ${UPDATE_INTERVAL} seconds"
		fi
		exit 0
	fi
fi

#
# --disable
# Disable the update schedule (just set 'false')
#
if [ "${DISABLE_UPDATE}" = "Y" ]; then
	if [ ! "${SCHEDULE_ID}" ]; then
		echo "$(basename $0): info: the schedule '${SCHEDULE_NAME}' is not active. Try with --enable to install/active it"
		exit 2
	fi

	# PUT API call for 'disable' only using SCHEDULE_ID
	DISABLE_OUTPUT=`curl -s -k --max-time 30 -X PUT "${REST_API_URL}/foglamp/schedule/${SCHEDULE_ID}/disable"`

	# Check "scheduleId":"..." in JSON output
	CHECK_DISABLE=`echo ${DISABLE_OUTPUT} | grep -i '\"scheduleId\"'`
	if [ ! "${CHECK_DISABLE}" ]; then
		echo "$(basename $0): error: failed to disable schedule: ${DISABLE_OUTPUT}"
		exit 3
	else
		echo "The schedule '${SCHEDULE_NAME}', ID [${SCHEDULE_ID}] has been disabled."
		exit 0
	fi
fi
