#!/bin/bash

##
# This script has been copied into FogLAMP 'scripts/tasks' by the Snap build process
#
# It has to be called by FogLAMP scheduler for updating FogLAMP installed as Snap package
##

__author__="Massimiliano Pinto"
__copyright__="Copyright (c) 2018 OSIsoft, LLC"
__license__="Apache 2.0"
__version__="1.1"

# Set the default value for FOGLAMP_ROOT if not set
if [ "${FOGLAMP_ROOT}" = "" ]; then
	FOGLAMP_ROOT=/usr/local/foglamp
fi

# Check availability of FOGLAMP_ROOT directory
if [ ! -d "${FOGLAMP_ROOT}" ]; then
        logger -p local0.err -t "FogLAMP[${$}]" "${TASK_NAME} $0 home directory missing or incorrectly set environment"
        exit 1
fi

# Handle input parameters
while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        --port)
            CORE_PORT=$VALUE
            ;;
        --address)
            CORE_ADDRESS=$VALUE
            ;;
        --name)
            TASK_NAME=$VALUE
            ;;
        *)
        ;;
    esac
    shift
done

# Include logging: it works only with bash
. "${FOGLAMP_ROOT}/scripts/common/write_log.sh" || exit 1

# Abort on missing CORE_PORT 
if [ ! "${CORE_PORT}" ]; then
	write_log "FogLAMP[${$}]" "err" "${TASK_NAME} $0: missing '--port' option. Exiting" "all" "pretty"
	exit 1
fi

# Set 'localhost' if CORE_ADDRESS is not set
if [ ! "${CORE_ADDRESS}" ]; then
	CORE_ADDRESS="localhost"
fi

REST_API_SCHEME="https://"
CORE_BASE_URL="${REST_API_SCHEME}${CORE_ADDRESS}:${CORE_PORT}/foglamp/service"


# Check FogLAMP Core is running at CORE_ADDRESS, CORE_PORT with HTTPS first
CHECK_SERVICE=`curl -s -k --max-time 30 "${CORE_BASE_URL}/ping" | grep -i uptime`

if [ ! "${CHECK_SERVICE}" ]; then
	# No reply using HTTPS, so try HTTP now
	REST_API_SCHEME="http://"
	CORE_BASE_URL="${REST_API_SCHEME}${CORE_ADDRESS}:${CORE_PORT}/foglamp/service"
	# Check FogLAMP Core is running at CORE_ADDRESS, CORE_PORT with HTTPP
	CHECK_SERVICE=`curl -s -k --max-time 30 "${CORE_BASE_URL}/ping" | grep -i uptime`
	# Exit on error
	if [ ! "${CHECK_SERVICE}" ]; then
		write_log "FogLAMP[${$}]" "err" "${TASK_NAME} $0: cannot connect to FogLAMP Core [${REST_API_SCHEME}${CORE_ADDRESS}:${CORE_PORT}]. Exiting" "all" "pretty"
		exit 1
	fi
fi

# Get the FogLAMP Core details
CORE_SERVICE_URL="${CORE_BASE_URL}?name=FogLAMP%20Core"
SERVICE_INFO=`curl -s -k --max-time 30 "${CORE_SERVICE_URL}"`
CHECK_SERVICE=`echo "${SERVICE_INFO}" | grep -i "FogLAMP Core"`

# Check for errors
if [ ! "${CHECK_SERVICE}" ]; then
	write_log "FogLAMP[${$}]" "err" "${TASK_NAME} $0: cannot get FogLAMP Core details from [${CORE_SERVICE_URL}]. Exiting."
	exit 2
fi

# Add foglamp python path to PYTHONPATH
export PYTHONPATH="${PYTHONPATH}:${FOGLAMP_ROOT}/scripts/common"

# On succes 'REST_API_URL' var holds the REST API server URL
REST_API_URL=`echo ${SERVICE_INFO} | python3 -m json_parse get_rest_api_url`
find_api_server=$?

# Check ret code
if [ "${find_api_server}" -ne 0 ]; then
    write_log "FogLAMP[${$}]" "err" "${TASK_NAME} $0: FogLAMP API URL [${REST_API_URL}]" "all" "pretty"
    exit 2
fi

# This task is responsible for updating FogLAMP installed as Snap package
PACKAGE_UPDATE_KEY="SNAP_UPD"

# Check/create SNAP configuration in FogLAMP with a JSON payload
JSON_CATEGORY_PAYLOAD="{\"key\": \"${PACKAGE_UPDATE_KEY}\", \
                        \"description\":\"Snap Update process\", \
                        \"value\": {\
                            \"repository\": {\
                                \"description\": \"Remote repository for package manager\", \
                                \"type\": \"string\", \
                                \"default\": \"https://s3.amazonaws.com/foglamp\"}, \
                            \"package\": {\
                                \"description\": \"Package manager type\", \
                                \"type\": \"string\", \
                                \"default\": \"Snap\"} \
                            }\
                       }"

write_log "FogLAMP[${$}]" "info" "${TASK_NAME} $0: FogLAMP API URL is [${REST_API_URL}]" "all" "pretty"

# Execute check/create categoria via REST API
API_OUTPUT=`curl -s -k --max-time 30 -d "${JSON_CATEGORY_PAYLOAD}" -X POST "${REST_API_URL}/foglamp/category"`

# Verify we have created or the category exists
RET=`echo $API_OUTPUT | python3 -m json_parse get_category_key ${PACKAGE_UPDATE_KEY}`
ret_code=$?
if [ "${ret_code}" -ne 0 ] || [ "${RET}" != "${PACKAGE_UPDATE_KEY}" ]; then
	write_log "FogLAMP[${$}]" "err" "${TASK_NAME} $0: error checking/creating configuration via REST API [${API_OUTPUT}], [${RET}]" "all" "pretty"
	exit 1
fi

# Get 'repository' value from JSON
REPO_URL=`echo ${API_OUTPUT} | python3 -m json_parse get_category_item_value repository`
ret_code=$?
if [ ! "${REPO_URL}" ] || [ "${REPO_URL}" = "null" ] || [ "${ret_code}" -ne 0 ]; then
	REPO_URL=`echo ${API_OUTPUT} | python3 -m json_parse get_category_item_default repository`
	ret_code=$?
	if [ ! "${REPO_URL}" ] || [ "${REPO_URL}" = "null" ] || [ "${ret_code}" -ne 0 ]; then
    		write_log "FogLAMP[${$}]" "err" "${TASK_NAME} $0: cannot get package 'repository' info: [${REPO_URL}]" "all" "pretty"
		exit 3
	fi
fi
write_log "FogLAMP[${$}]" "info" "${TASK_NAME} $0: Package update repository is [${REPO_URL}], type [Snap]" "all" "pretty"

#
# We run the updater script
#
# Note: the called script must ignore some signals; TERM, INT, HUP, QUIT 
#

command="${FOGLAMP_ROOT}/scripts/common/snap-get.sh upgrade foglamp --devmode --manage --repo=${REPO_URL}"

# We log options with -- using ''. '--manage'
write_log "FogLAMP[${$}]" "info" "${TASK_NAME} $0: Calling '${FOGLAMP_ROOT}/scripts/common/snap-get.sh'"\
" 'upgrade' 'foglamp' '--devmode' '--manage' '--repo=${REPO_URL}'" "all" "pretty"

# Disconnect script execution from shell
nohup $command </dev/null >/dev/null 2>&1 &
